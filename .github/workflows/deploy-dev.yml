name: Deploy to Dev

on:
  workflow_run:
    workflows: ["Docker Build and Push"]
    types:
      - completed

jobs:
  deploy-dev:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: self-hosted
    environment: dev

    defaults:
      run:
        working-directory: ${{ github.workspace }}/eShop

    env:
      SQLSERVER_SA_PASSWORD: ${{ secrets.SQLSERVER_SA_PASSWORD }}
      ORDERDB_CONNECTIONSTRING: ${{ secrets.ORDERDB_CONNECTIONSTRING }}
      INVENTORYDB_CONNECTIONSTRING: ${{ secrets.INVENTORYDB_CONNECTIONSTRING }}
      RABBITMQ_USERNAME: ${{ secrets.RABBITMQ_USERNAME }}
      RABBITMQ_PASSWORD: ${{ secrets.RABBITMQ_PASSWORD }}
      RABBITMQ_VIRTUALHOST: ${{ secrets.RABBITMQ_VIRTUALHOST }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        path: eShop

    - name: Replace secrets in Docker Compose
      shell: powershell
      run: |
        (Get-Content deploy/docker-compose.dev.yml) `
        -replace '@@SQLSERVER_SA_PASSWORD@@', "$env:SQLSERVER_SA_PASSWORD" `
        -replace '@@ORDERDB_CONNECTIONSTRING@@', "$env:ORDERDB_CONNECTIONSTRING" `
        -replace '@@INVENTORYDB_CONNECTIONSTRING@@', "$env:INVENTORYDB_CONNECTIONSTRING" `
        -replace '@@RABBITMQ_USERNAME@@', "$env:RABBITMQ_USERNAME" `
        -replace '@@RABBITMQ_PASSWORD@@', "$env:RABBITMQ_PASSWORD" `
        -replace '@@RABBITMQ_VIRTUALHOST@@', "$env:RABBITMQ_VIRTUALHOST" `
        | Set-Content deploy/docker-compose.dev.yml

    - name: Pull latest images
      run: |
        docker pull majidebadiparsajob/orderservice:latest
        docker pull majidebadiparsajob/inventoryservice:latest
        docker pull majidebadiparsajob/orderdb-migrator:latest
        docker pull majidebadiparsajob/inventorydb-migrator:latest

    - name: Clean previous containers
      run: docker-compose -f deploy/docker-compose.dev.yml down
      continue-on-error: true

    - name: Start infrastructure (DB + RabbitMQ + Migrator)
      run: docker-compose -f deploy/docker-compose.dev.yml up -d sqlserver rabbitmq sql-migrator

    - name: Wait until sql-migrator container exists
      shell: powershell
      run: |
        Write-Host "Waiting for sql-migrator container to start..."
        for ($i = 1; $i -le 20; $i++) {
          $containerExists = docker ps -a --format "{{.Names}}" | Select-String "sql-migrator"
          if ($containerExists) {
            Write-Host "sql-migrator container detected."
            break
          } else {
            Write-Host "sql-migrator not started yet. Waiting 2 seconds..."
            Start-Sleep -Seconds 2
          }
        }

    - name: Wait for SQL Server to become ready
      shell: powershell
      run: |
        Write-Host "Waiting for SQL Server to become ready..."
        $SqlServerContainerIp = docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' sqlserver-db
        Write-Host "Giving SQL Server container 10 seconds to initialize..."
        Start-Sleep -Seconds 10
        for ($i = 1; $i -le 30; $i++) {
          try {
            docker exec sql-migrator /opt/mssql-tools/bin/sqlcmd -S "$SqlServerContainerIp" -U sa -P "$env:SQLSERVER_SA_PASSWORD" -Q "SELECT 1"
            Write-Host "SQL Server is ready."
            break
          }
          catch {
            Write-Host "SQL Server not ready yet. Retrying in 2 seconds..."
            Start-Sleep -Seconds 2
          }
        }

    - name: Apply SQL Migrations
      shell: powershell
      run: |
        & "./deploy/run-migrations.ps1"

    - name: Deploy application services
      run: docker-compose -f deploy/docker-compose.dev.yml up -d orderservice inventoryservice
