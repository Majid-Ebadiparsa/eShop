name: DeliveryService - Pipeline

on:
  pull_request:
    paths:
      - 'DeliveryService/**'
      - '.github/workflows/deliveryservice.yml'
  push:
    branches: [ "main", "develop", "feature/**" ]
    paths:
      - 'DeliveryService/**'
      - '.github/workflows/deliveryservice.yml'
  workflow_dispatch:
    inputs:
      deploy_prod:
        description: "Deploy to Production (true/false)"
        required: false
        default: "false"
        type: choice
        options: ["false","true"]
      prod_tag:
        description: "Optional image tag (short SHA). Empty = last main commit"
        required: false
        type: string

concurrency:
  group: deliveryservice-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  packages: write

env:
  SERVICE_NAME: deliveryservice
  SLN: Delivery.sln
  DOCKER_IMAGE: majidebadiparsajob/deliveryservice

jobs:

  build_test:
    name: Build & Test
    runs-on: ubuntu-latest
    outputs:
      sha_short: ${{ steps.meta.outputs.sha_short }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Derive short SHA
        id: meta
        run: echo "sha_short=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        run: dotnet restore ${{ env.SLN }}

      - name: Build
        run: dotnet build ${{ env.SLN }} --no-restore -c Release

      - name: Test
        run: dotnet test ${{ env.SLN }} --no-build -c Release --logger "trx;LogFileName=${{ env.SERVICE_NAME }}-tests.trx"

      - name: Publish test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SERVICE_NAME }}-test-results
          path: '**/*.trx'

  ef_bundle:
    name: Build EF Migration Bundle
    runs-on: ubuntu-latest
    needs: [ build_test ]
    if: |
      github.event_name == 'push' &&
      startsWith(github.ref, 'refs/heads/main')
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with: { dotnet-version: '8.0.x' }

      - name: Restore local tools
        run: dotnet tool restore

      - name: Restore solution
        run: dotnet restore ${{ env.SLN }}

      - name: Build solution (Release)
        run: dotnet build ${{ env.SLN }} -c Release --no-restore

      - name: Build idempotent bundle
        run: |
          dotnet ef migrations bundle \
            --project DeliveryService/DeliveryService.Infrastructure/DeliveryService.Infrastructure.csproj \
            --startup-project DeliveryService/DeliveryService.API/DeliveryService.API.csproj \
            --output ${{ env.SERVICE_NAME }}-migrations

      - name: Upload bundle artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SERVICE_NAME }}-migrations-bundle
          path: ${{ env.SERVICE_NAME }}-migrations

  docker_publish:
    name: Docker Build & Publish
    runs-on: ubuntu-latest
    needs: [ build_test ]
    if: |
      github.event_name == 'push' &&
      startsWith(github.ref, 'refs/heads/main')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}


      - name: Debug tree
        run: |
          pwd
          ls -la
          test -d SharedService.Contracts && echo "✅ SharedService.Contracts exists" || (echo "❌ SharedService.Contracts missing"; exit 1)
          ls -la SharedService.Contracts || true


      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: DeliveryService/DeliveryService.API/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:sha-${{ needs.build_test.outputs.sha_short }}
            ${{ env.DOCKER_IMAGE }}:latest
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:latest
          cache-to: type=inline

  deploy_staging:
    name: Deploy to Staging
    runs-on: self-hosted
    environment: staging
    needs: [ docker_publish, ef_bundle ]
    if: |
      github.event_name == 'push' &&
      startsWith(github.ref, 'refs/heads/main')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download EF bundle
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.SERVICE_NAME }}-migrations-bundle
          path: ./artifacts/${{ env.SERVICE_NAME }}

      - name: Create .env (staging)
        run: |
          cat > .env <<EOF
          SQLSERVER_SA_PASSWORD=${{ secrets.SQLSERVER_SA_PASSWORD }}
          ORDERDB_CONNECTIONSTRING=${{ secrets.ORDERDB_CONNECTIONSTRING }}
          INVENTORYDB_CONNECTIONSTRING=${{ secrets.INVENTORYDB_CONNECTIONSTRING }}
          DELIVERYDB_CONNECTIONSTRING=${{ secrets.DELIVERYDB_CONNECTIONSTRING }}
          RABBITMQ_USERNAME=${{ secrets.RABBITMQ_USERNAME }}
          RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }}
          RABBITMQ_VIRTUALHOST=${{ secrets.RABBITMQ_VIRTUALHOST }}
          RABBITMQ_ORDERRECEIVEENDPOINT=${{ secrets.RABBITMQ_ORDERRECEIVEENDPOINT }}
          RABBITMQ_INVENTORYRECEIVEENDPOINT=${{ secrets.RABBITMQ_INVENTORYRECEIVEENDPOINT }}
          RABBITMQ_DELIVERYRECEIVEENDPOINT=${{ secrets.RABBITMQ_DELIVERYRECEIVEENDPOINT }}
          ORDERSERVICE_IMAGE=majidebadiparsajob/orderservice:latest
          INVENTORYSERVICE_IMAGE=majidebadiparsajob/inventoryservice:latest
          DELIVERYSERVICE_IMAGE=${{ env.DOCKER_IMAGE }}:sha-${{ needs.build_test.outputs.sha_short }}
          EOF

      - name: Run EF bundle (Delivery DB)
        env:
          ConnectionStrings__DeliveryDb: ${{ secrets.DELIVERYDB_CONNECTIONSTRING }}
        run: |
          chmod +x ./artifacts/${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}-migrations
          ./artifacts/${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}-migrations

      - name: Compose Up (staging)
        run: |
          docker network inspect eshop_eshopnetwork >/dev/null 2>&1 || docker network create eshop_eshopnetwork
          docker compose --env-file .env -f deploy/docker-compose.staging.yml pull
          docker compose --env-file .env -f deploy/docker-compose.staging.yml up -d deliveryservice

  deploy_production:
    name: Deploy to Production (manual)
    runs-on: ubuntu-latest
    environment:
      name: production

    needs: [ docker_publish, ef_bundle ]
    if: |
      github.event_name == 'workflow_dispatch' &&
      inputs.deploy_prod == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Resolve tag
        id: tag
        run: |
          TAG="${{ inputs.prod_tag }}"
          if [ -z "$TAG" ]; then
            TAG="${GITHUB_SHA::7}"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Download EF bundle
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.SERVICE_NAME }}-migrations-bundle
          path: ./artifacts/${{ env.SERVICE_NAME }}

      - name: Create .env (prod)
        run: |
          cat > .env <<EOF
          SQLSERVER_SA_PASSWORD=${{ secrets.PROD_SQLSERVER_SA_PASSWORD }}
          ORDERDB_CONNECTIONSTRING=${{ secrets.PROD_ORDERDB_CONNECTIONSTRING }}
          INVENTORYDB_CONNECTIONSTRING=${{ secrets.PROD_INVENTORYDB_CONNECTIONSTRING }}
          DELIVERYDB_CONNECTIONSTRING=${{ secrets.PROD_DELIVERYDB_CONNECTIONSTRING }}
          RABBITMQ_USERNAME=${{ secrets.PROD_RABBITMQ_USERNAME }}
          RABBITMQ_PASSWORD=${{ secrets.PROD_RABBITMQ_PASSWORD }}
          RABBITMQ_VIRTUALHOST=${{ secrets.PROD_RABBITMQ_VIRTUALHOST }}
          RABBITMQ_ORDERRECEIVEENDPOINT=${{ secrets.PROD_RABBITMQ_ORDERRECEIVEENDPOINT }}
          RABBITMQ_INVENTORYRECEIVEENDPOINT=${{ secrets.PROD_INVENTORYRECEIVEENDPOINT }}
          RABBITMQ_DELIVERYRECEIVEENDPOINT=${{ secrets.PROD_DELIVERYRECEIVEENDPOINT }}
          ORDERSERVICE_IMAGE=majidebadiparsajob/orderservice:sha-<LAST_GOOD_SHA>
          INVENTORYSERVICE_IMAGE=majidebadiparsajob/inventoryservice:sha-<LAST_GOOD_SHA>
          DELIVERYSERVICE_IMAGE=${{ env.DOCKER_IMAGE }}:sha-${{ steps.tag.outputs.tag }}
          EOF

      - name: Run EF bundle (Delivery DB - prod)
        env:
          ConnectionStrings__DeliveryDb: ${{ secrets.PROD_DELIVERYDB_CONNECTIONSTRING }}
        run: |
          chmod +x ./artifacts/${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}-migrations
          ./artifacts/${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}-migrations

      - name: Compose Up (prod)
        run: |
          docker network inspect eshop_eshopnetwork >/dev/null 2>&1 || docker network create eshop_eshopnetwork
          docker compose --env-file .env -f deploy/docker-compose.production.yml pull
          docker compose --env-file .env -f deploy/docker-compose.production.yml up -d deliveryservice
