name: EShop CI Pipeline

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch: {}

jobs:

  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Start SQL Server container
      run: |
        docker run -d --name sqlserver \
          -e "ACCEPT_EULA=Y" \
          -e "SA_PASSWORD=eSh@pDem@1" \
          -p 1433:1433 \
          mcr.microsoft.com/mssql/server:2022-latest

    - name: Wait for SQL Server to be ready
      run: |
        for i in {1..30}; do
          if docker exec sqlserver /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'eSh@pDem@1' -Q "SELECT 1" &> /dev/null; then
            echo "SQL Server is ready!"
            break
          else
            echo "Waiting for SQL Server..."
            sleep 5
          fi
        done

    # Build & Test OrderService
    - name: Restore dependencies - OrderService
      run: dotnet restore ./OrderService/OrderService.API/OrderService.API.csproj

    - name: Build - OrderService
      run: dotnet build ./OrderService/OrderService.API/OrderService.API.csproj --no-restore --configuration Release

    - name: Test - OrderService
      run: dotnet test ./OrderService/OrderService.Tests/OrderService.Tests.csproj --no-build --verbosity normal

    # Build & Test InventoryService
    - name: Restore dependencies - InventoryService
      run: dotnet restore ./InventoryService/InventoryService.API/InventoryService.API.csproj

    - name: Build - InventoryService
      run: dotnet build ./InventoryService/InventoryService.API/InventoryService.API.csproj --no-restore --configuration Release

    - name: Test - InventoryService
      run: dotnet test ./InventoryService/InventoryService.Tests/InventoryService.Tests.csproj --no-build --verbosity normal
